(function() {
  angular.module('app.service.application', []).factory("ApplicationService", [
    'APIService', '$auth', function(APIService, $auth) {
      var ApplicationService;
      return new (ApplicationService = (function() {
        var MetricParamList;

        function ApplicationService() {}

        MetricParamList = (function() {
          function MetricParamList() {
            this.items = [];
          }

          MetricParamList.prototype.push = function(item) {
            return this.items.push(item);
          };

          MetricParamList.prototype.toQueryString = function() {
            var metrics;
            return metrics = [];
          };

          return MetricParamList;

        })();

        ApplicationService.prototype.getApplication = function(id) {
          return APIService.get('/applications/' + id);
        };

        ApplicationService.prototype.listApplications = function(count, offset, filters, order) {
          if (count == null) {
            count = 10;
          }
          if (offset == null) {
            offset = 0;
          }
          if (filters == null) {
            filters = {};
          }
          if (order == null) {
            order = null;
          }
          filters = angular.extend(filters, {
            type: 'shiny'
          });
          return APIService.list('/applications', count, offset, filters, order);
        };

        ApplicationService.prototype.purgeApplication = function(application) {
          return APIService.post('/applications/' + application.id + '/purge');
        };

        ApplicationService.prototype.terminateApplication = function(application) {
          return APIService.post('/applications/' + application.id + '/terminate');
        };

        ApplicationService.prototype.deployApplication = function(application, rebuild) {
          if (rebuild == null) {
            rebuild = false;
          }
          return APIService.post('/applications/' + application.id + '/deploy', '', {
            params: {
              rebuild: rebuild
            }
          });
        };

        ApplicationService.prototype.getLogs = function(application) {
          return APIService.get('/applications/' + application.id + '/logs');
        };

        ApplicationService.prototype.getLogsUrl = function(application, count) {
          if (count == null) {
            count = 1500;
          }
          return APIService.getURL('/applications/' + application.id + '/logs') + "?count=" + count + "&auth=" + $auth.getToken();
        };

        ApplicationService.prototype.getMetrics = function(application, series, metrics, options) {
          var m;
          if (options == null) {
            options = null;
          }
          metrics = ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = metrics.length; _i < _len; _i++) {
              m = metrics[_i];
              _results.push('metric=' + m);
            }
            return _results;
          })()).join('&');
          return APIService.get('/applications/' + application.id + '/metrics/' + series + '?' + metrics, {
            params: {
              'interval': options.interval || '1h',
              'from': options.from || null,
              'until': options.until || null
            }
          });
        };

        ApplicationService.prototype.listAuthorized = function(application, count, offset, filters, order) {
          if (count == null) {
            count = 10;
          }
          if (offset == null) {
            offset = 0;
          }
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          return APIService.list('/applications/' + application.id + '/authorization/', count, offset, filters, order);
        };

        ApplicationService.prototype.listInvited = function(application, count, offset, filters, order) {
          if (count == null) {
            count = 10;
          }
          if (offset == null) {
            offset = 10;
          }
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          filters = filters || {};
          filters.app_id = application.id;
          return APIService.list('/invitations/', count, offset, filters, order);
        };

        ApplicationService.prototype.listUsers = function(application, count, offset, filters, order) {
          if (count == null) {
            count = 10;
          }
          if (offset == null) {
            offset = 0;
          }
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          return APIService.list('/applications/' + application.id + '/authorization/users/', count, offset, filters, order);
        };

        ApplicationService.prototype.listGroups = function(application, count, offset, filters, order) {
          if (count == null) {
            count = 10;
          }
          if (offset == null) {
            offset = 0;
          }
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          return APIService.list('/applications/' + application.id + '/authorization/groups/', count, offset, filters, order);
        };

        ApplicationService.prototype.getAuthorized = function(application, filters, order) {
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          return APIService.listAll('/applications/' + application.id + '/authorization/', 'authorization', filters, order);
        };

        ApplicationService.prototype.getInvited = function(application, filters, order) {
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          filters = filters || {};
          filters.app_id = application.id;
          return APIService.listAll('/invitations/', 'invitations', filters, order);
        };

        ApplicationService.prototype.getGroups = function(application, filters, order) {
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          return APIService.listAll('/applications/' + application.id + '/authorization/groups/', 'groups', filters, order);
        };

        ApplicationService.prototype.getUsers = function(application, filters, order) {
          if (filters == null) {
            filters = null;
          }
          if (order == null) {
            order = null;
          }
          return APIService.listAll('/applications/' + application.id + '/authorization/users/', 'users', filters, order);
        };

        ApplicationService.prototype.inviteUser = function(application, email, invite_email, invite_email_message) {
          if (invite_email == null) {
            invite_email = true;
          }
          if (invite_email_message == null) {
            invite_email_message = null;
          }
          return APIService.post('/applications/' + application.id + '/authorization/users/', {
            email: email,
            invite_email: invite_email,
            invite_email_message: invite_email_message
          });
        };

        ApplicationService.prototype.cancelInvite = function(invite) {
          return APIService["delete"]('/invitations/' + invite.id);
        };

        ApplicationService.prototype.resendInvite = function(invite, regenerate) {
          if (regenerate == null) {
            regenerate = true;
          }
          return APIService.post('/invitations/' + invite.id + '/send/', {
            regenerate: regenerate
          });
        };

        ApplicationService.prototype.removeUser = function(application, user) {
          return APIService["delete"]('/applications/' + application.id + '/authorization/users/' + user.id);
        };

        ApplicationService.prototype.addUser = function(application, user) {
          return APIService.put('/applications/' + application.id + '/authorization/users/' + user.id);
        };

        ApplicationService.prototype.getUsage = function(application, usage, options) {
          if (options == null) {
            options = null;
          }
          return APIService.get('/accounts/' + application.account_id + '/usage/' + usage, {
            params: {
              'application': application.id,
              'interval': options.interval || '1h',
              'from': options.from || null,
              'until': options.until || null
            }
          });
        };

        ApplicationService.prototype.setProperty = function(application, property, value) {
          return APIService.put('/applications/' + application.id + '/properties/' + property, value);
        };

        ApplicationService.prototype.setProperties = function(application, properties) {
          return APIService.post('/applications/' + application.id + '/properties', properties);
        };

        return ApplicationService;

      })());
    }
  ]);

}).call(this);
"*dá*      Xø¢êXø¢ê=«’Xøá„   >    :https://www.shinyapps.io/admin/scripts/service/application.js necko:classified 1 strongly-framed 1 security-info FnhllAKWRHGAlo+ESXykKAAAAAAAAAAAwAAAAAAAAEaphjojH6pBabDSgSnsfLHeAAQAAgAAAAAAAAAAAAAAAAAAAAAB4vFIJp5wRkeyPxAQ9RJGKPqbqVvKO0mKuIl8ec8o/uhmCjImkVxP+7sgiYWmMt8FvcOXmlQiTNWFiWlrbpbqgwAAAAAAAAUIMIIFBDCCA+ygAwIBAgISA0Ts33LowAg+Zs9m9tEz8o6AMA0GCSqGSIb3DQEBCwUAMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQDExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNzAzMjcxNzE3MDBaFw0xNzA2MjUxNzE3MDBaMBsxGTAXBgNVBAMTEHd3dy5zaGlueWFwcHMuaW8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtYbnYnZ/rN6p/1Fqp8gX3qB6k1uy6TwOLZPF+lZxfQ4uonOowQ7UrFwapU+mITi/l5Rw77Pdal5jVGipicvvZbgZkMkc+HqUBDLGbMdqZct3QvqVQFVSKYkwQMWqIJkljmr2WSpbPtxeD9c6AJ8uU/orqZPZlOnRnI3/+8OlnTvogssGaAEWkijBF9NuDm42yDiLtv5qWhhKjzppgjDTYVA109kg/+DvMQFpvfWVG6Vy/Ic8fnJKrMpQOFyYuSOs1nkqw0xwirqbO6CHUMjWOr5gEekDRx+12SxpwR0FAdpBVb8WQWGvkAdkEJk+MyzBv1D2iKJ1QkkKQYYhdHGf/AgMBAAGjggIRMIICDTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFAitCoNqQC56a3oTa2Zjkc/MXX8oMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAGCCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxldHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5sZXRzZW5jcnlwdC5vcmcvMBsGA1UdEQQUMBKCEHd3dy5zaGlueWFwcHMuaW8wgf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeYGCysGAQQBgt8TAQEBMIHWMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYBBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1cG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBodHRwczovL2xldHNlbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAW666JtafvOyKokL4jdvNvNdNENb5+jsy11DteHT+Src08XKErD37JHNGB9eiP96ifoltDPCoY0khBXoUWgf/sqLCyGaN9ZKqzcsQVRi7zP96a+tCoTpA0+FUnGuh7V1Fnruzhr4S/P8aqi1RKcsJsaX2hd7VaDUeBcHoXD8VFnTWP12XXzRr/07MulIlpB5HFVqOWcgQ+u5HSBLpm5ypWzQdEwfZEn/JbVnbN7kiM1x823MwO2aflw8a6E9fjGjDcibUrSv2H5qy+no92APoZcf/P5iYRdS7pNcB+fRpQSaa53a8QWCq4SV3Q8N/bDfuwAkdQeBJfHy9TRgMkpstV8AvAQMAAAAAAQEAAAEA request-method GET response-head HTTP/1.1 200 OK
Last-Modified: Tue, 18 Apr 2017 15:20:19 GMT
Etag: "d0f4855cf5e1e880edb08c65620a82f9"
Date: Thu, 20 Apr 2017 12:00:14 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Server: TornadoServer/4.0.2
Content-Length: 9376
Via: 1.1 vegur
 original-response-headers Connection: keep-alive
Last-Modified: Tue, 18 Apr 2017 15:20:19 GMT
Etag: "d0f4855cf5e1e880edb08c65620a82f9"
Date: Thu, 20 Apr 2017 12:00:14 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Server: TornadoServer/4.0.2
Content-Length: 9376
Via: 1.1 vegur
 uncompressed-len 0 net-response-time-onstart 25742 net-response-time-onstop 25744   $ 